//! Autogenerated weights for `pallet_timestamp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-27, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --wasm-execution=compiled
// --pallet=pallet_timestamp
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions needed for pallet_timestamp.
pub trait WeightInfo {
    fn set() -> Weight;
    fn on_finalize() -> Weight;
}

/// Weights for pallet_timestamp using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_timestamp::WeightInfo for SubstrateWeight<T> {
    /// Storage: Timestamp Now (r:1 w:1)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode:
    /// MaxEncodedLen) Storage: Aura CurrentSlot (r:1 w:0)
    /// Proof: Aura CurrentSlot (max_values: Some(1), max_size: Some(8), added: 503, mode:
    /// MaxEncodedLen)
    fn set() -> Weight {
        Weight::from_parts(8_000_000, 1493)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn on_finalize() -> Weight {
        Weight::from_parts(4_000_000, 0)
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: Timestamp Now (r:1 w:1)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode:
    /// MaxEncodedLen) Storage: Aura CurrentSlot (r:1 w:0)
    /// Proof: Aura CurrentSlot (max_values: Some(1), max_size: Some(8), added: 503, mode:
    /// MaxEncodedLen)
    fn set() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `85`
        //  Estimated: `1493`
        // Minimum execution time: 7_000_000 picoseconds.
        Weight::from_parts(8_000_000, 1493)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn on_finalize() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `94`
        //  Estimated: `0`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(4_000_000, 0)
    }
}
