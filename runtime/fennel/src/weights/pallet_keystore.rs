
//! Autogenerated weights for `pallet_keystore`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-27, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --wasm-execution=compiled
// --pallet=pallet_keystore
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_keystore.
pub trait WeightInfo {
	fn announce_key() -> Weight;
	fn announce_a_whole_lotta_keys() -> Weight;
	fn announce_key_with_long_vectors() -> Weight;
	fn announce_a_bunch_of_long_keys() -> Weight;
	fn revoke_key() -> Weight;
	fn revoke_one_of_many_keys() -> Weight;
	fn issue_encryption_key() -> Weight;
	fn issue_a_ton_of_encryption_keys() -> Weight;
}

/// Weights for pallet_keystore using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_keystore::WeightInfo for SubstrateWeight<T> {
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_key() -> Weight {
		Weight::from_parts(13_000_000, 3507)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_a_whole_lotta_keys() -> Weight {
		Weight::from_parts(54_000_000, 5586)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_key_with_long_vectors() -> Weight {
		Weight::from_parts(19_000_000, 3507)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_a_bunch_of_long_keys() -> Weight {
		Weight::from_parts(60_000_000, 5582)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn revoke_key() -> Weight {
		Weight::from_parts(14_000_000, 3636)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn revoke_one_of_many_keys() -> Weight {
		Weight::from_parts(57_000_000, 5614)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn revoke_one_of_many_keys() -> Weight {
		Weight::from_parts(51_000_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_encryption_key() -> Weight {
		Weight::from_parts(8_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedEncryptionKeys (r:0 w:1)
	/// Proof: Keystore IssuedEncryptionKeys (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	fn issue_a_ton_of_encryption_keys() -> Weight {
		Weight::from_parts(19_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3507)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_a_whole_lotta_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2121`
		//  Estimated: `5586`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(54_000_000, 5586)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_key_with_long_vectors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3507)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_a_bunch_of_long_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2117`
		//  Estimated: `5582`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(60_000_000, 5582)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn revoke_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3636`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3636)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:1 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn revoke_one_of_many_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2149`
		//  Estimated: `5614`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(57_000_000, 5614)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn revoke_one_of_many_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2112`
		//  Estimated: `5581`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(51_000_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_encryption_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedEncryptionKeys (r:0 w:1)
	/// Proof: Keystore IssuedEncryptionKeys (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	fn issue_a_ton_of_encryption_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
