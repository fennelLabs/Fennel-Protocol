//! Autogenerated weights for `pallet_session`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-27, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --wasm-execution=compiled
// --pallet=pallet_session
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions needed for pallet_session.
pub trait WeightInfo {
    fn set_keys() -> Weight;
    fn purge_keys() -> Weight;
}

/// Weights for pallet_session using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_session::WeightInfo for SubstrateWeight<T> {
    /// Storage: Session NextKeys (r:1 w:1)
    /// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
    /// Storage: Session KeyOwner (r:1 w:1)
    /// Proof Skipped: Session KeyOwner (max_values: None, max_size: None, mode: Measured)
    fn set_keys() -> Weight {
        Weight::from_parts(18_000_000, 3762)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Session NextKeys (r:1 w:1)
    /// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
    /// Storage: Session KeyOwner (r:0 w:1)
    /// Proof Skipped: Session KeyOwner (max_values: None, max_size: None, mode: Measured)
    fn purge_keys() -> Weight {
        Weight::from_parts(13_000_000, 3744)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: Session NextKeys (r:1 w:1)
    /// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
    /// Storage: Session KeyOwner (r:1 w:1)
    /// Proof Skipped: Session KeyOwner (max_values: None, max_size: None, mode: Measured)
    fn set_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `297`
        //  Estimated: `3762`
        // Minimum execution time: 17_000_000 picoseconds.
        Weight::from_parts(18_000_000, 3762)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: Session NextKeys (r:1 w:1)
    /// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
    /// Storage: Session KeyOwner (r:0 w:1)
    /// Proof Skipped: Session KeyOwner (max_values: None, max_size: None, mode: Measured)
    fn purge_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `279`
        //  Estimated: `3744`
        // Minimum execution time: 12_000_000 picoseconds.
        Weight::from_parts(13_000_000, 3744)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}
